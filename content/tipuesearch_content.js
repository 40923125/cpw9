var tipuesearch = {"pages": [{'title': 'About', 'text': '\n 這個倉儲位於\xa0 https://github.com/mdecourse/cmstemplate \xa0是一個能夠與 Github Pages, Gitlab Pages 以及 Heroku 結合的網際內容管理系統. \n', 'tags': '', 'url': 'About.html'}, {'title': 'Hint', 'text': '\n 是否了解如何設定 Github Pages? \n 是否了解如何設定 Gitlab Pages? \n 是否了解如何設定 Heroku? \n \n 作業一的目的: \n \n 閱讀與電腦軟硬體相關的英文資料, 藉以了解英文相關術語 \n 了解電腦與網路相關設定 \n 了解如何使用 Git, Github 與 CMSiMDE \n \n 作業二的目的: \n \n 實際了解 Python 程式在課程推動上的應用 \n 了解如何從網站超文件資料中擷取所要的資料 \n 使用 Kaggle 與近端 SciTE 開發 Python 程式 \n \n 作業三的目的: \n \n 著手利用 Python 解決各類問題 \n 利用 Python 修改 Solidworks 與 Inventor 零件尺寸 \n \n', 'tags': '', 'url': 'Hint.html'}, {'title': 'gitlab-ci.yml', 'text': '標題不能使用 .gitlab-ci.yml 因為轉為 content/.gitlab-ci.yml 時, 無法從 content/.github-ci.yml 呼叫. \n .gitlab-ci.yml 是在 Gitlab Pages 設定過程中將靜態網頁轉存並伺服的 continuout integration 設定檔案. \n pages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive \n', 'tags': '', 'url': 'gitlab-ci.yml.html'}, {'title': 'CMSiMDE', 'text': '網際內容管理系統 \n Web-based Content Management System \n https://learnmech.com/ \n https://www.instructables.com/ \xa0\xa0 \n https://imechanica.org/ \xa0 \n https://info.traceparts.com/use-and-manage-3d-cad-models/download-free-cad-models/ \xa0 \n https://bookboon.com/en \xa0 \n \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': 'CMSiMDE 程式架構', 'text': '動態網頁的主要檔案為 config/content.htm \n 當使用者在命令列中將目錄更換到 cmsimde, 然後以 python wsgi.py 執行 wsgi.py 程式時, 其實 Python 程式是仰賴 Flask 網際框架結構來進行資料伺服. \n CMSiMDE 的作動需要 Flask 網際框架, 需要 bs4 與 lxml 進行 content.htm 的頁面解讀, 透過超文件檔案中的 h1, h2 與 h3 由上到下執行循序式分頁, 之後再透過 Javascript 與 css 將 h1, h2, h3 依照樹狀結構, h1 標題為第一階, h2 為第二階, h3 為第三階. \n', 'tags': '', 'url': 'CMSiMDE 程式架構.html'}, {'title': '為何需要網際內容管理', 'text': '全球資訊網無遠弗屆, 而且 WWW 的伺服架構相對於手機 APP 對於使用者而言更加友善, 除了允許多重身分無需實名綁定之外, 可以讓工程師進行各種協同設計, 因此若能廣泛利用網際環境建立各種應用程式環境, 將有助提升設計效益. \n', 'tags': '', 'url': '為何需要網際內容管理.html'}, {'title': '如何建立 CMSiMDE 子模組', 'text': 'git submodule add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde \n 表示要透過 git submodule add 將  https://github.com/mdecourse/cmsimde.git \xa0遠端倉儲當作子模組, 而且將資料存入子目錄 cmsimde 中. \n', 'tags': '', 'url': '如何建立 CMSiMDE 子模組.html'}, {'title': '為何需要以子模組的設計', 'text': '在一個倉儲中帶有子模組的用意是善用分散式設計的做法, 子模組代表一個非由倉儲管理者維護權限所及的單位模組. 意即, 倉儲中程式的執行需要子模組中的資料, 但是倉儲擁有者將子模組視為獨立元件, 並不需要對子模組的內容進行改版. 一旦子模組原始倉儲資料更新, 採用子模組的各倉儲所有者可以決定是否配合跟進, 若不跟進仍有使用既有版本的子模組繼續運作, 原始子模組與採用不同版本子模組的倉儲都不會彼此受到影響. \n', 'tags': '', 'url': '為何需要以子模組的設計.html'}, {'title': '兩種不同的 git clone', 'text': 'git clone  https://github.com/mdecourse/cmsimde.git \n 表示要將 cmsimde 倉儲的資料 clone 到近端, 針對沒有子模組設置的倉儲可以直接以 git clone 取下倉儲資料 \n git clone --recurse-submodules  https://github.com/mdecourse/cp2020.git \n 表示要將 cp2020 倉儲中包含個子模組與可能子模組中的子模組等資料, 全部 clone 到近端. \n', 'tags': '', 'url': '兩種不同的 git clone.html'}, {'title': '假如 CMSiMDE 不設為子模組', 'text': '其實各用戶若希望自行維護 CMSiMDE 網際內容管理系統, 可以直接取下 CMSiMDE 程式資料, 然後將倉儲資料放在 cmsimde 子目錄中, 並將 up_dir 中的資料複製一份到倉儲根目錄, 如此就可以依 CMSiMDE 的用法使用動態與靜態網頁. \n', 'tags': '', 'url': '假如 CMSiMDE 不設為子模組.html'}, {'title': '為何需要有動態網頁與靜態網頁', 'text': '所謂的動態網頁指的是有登入系統配置的網際內容管理系統, 當使用者登入後進行內容管理, 網站會馬上呈現新版本內容, 通常無需進行網頁轉換. \n 所謂的靜態網頁則指網站通常沒有登入系統的配置, 而且通常只包含 html 與 Javascript 資料, 由於沒有登入系統, 因此沒有內容被駭的問題, 除非負責伺服超文件網頁的系統遭駭. \n 而 CMSiMDE 的動態網頁用於編輯網站內容, 而靜態網頁則可以利用 Github Pages, Gitlab Pages 與 Heroku 進行伺服. \n', 'tags': '', 'url': '為何需要有動態網頁與靜態網頁.html'}, {'title': 'CMSiMDE 有甚麼使用上的限制嗎比方說能夠使用那些特殊符號, 為什麼不能使用分號, 以及所謂的標題有沒有最多幾個字元的限制, 另外就是假如標題過長, 會發生甚麼狀況與後果', 'text': '假如在上列頁面標題中加上兩個 "?", 上面這個標題就無法順利分頁, 但是利用 SciTE 編輯 config/content.htm 之後將兩個 "?" 刪除後則可以正確完成分頁. \n 上面的標題字元數超過 80 個, 雖可正常分頁但是在資料展示上就顯得不很方便. \n CMSiMDE 標題不能使用 ":" 的原因在於 Windows 操作系統不允許檔案名稱中有 ":", 因此當 CMSiMDE 動態轉靜態時必須以頁面標題作為該頁的檔案名稱, 而無法完成靜態頁面存檔的問題會讓 CMSiMDE 無法順利將動態資料轉為靜態資料. \n', 'tags': '', 'url': 'CMSiMDE 有甚麼使用上的限制嗎比方說能夠使用那些特殊符號, 為什麼不能使用分號, 以及所謂的標題有沒有最多幾個字元的限制, 另外就是假如標題過長, 會發生甚麼狀況與後果.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': 'pch8第73〜75頁', 'text': '電腦冷卻 \n 1.主動風冷： 主動空氣冷卻組件由風扇和鋁或銅製成的冷卻板（散熱器）組成。 風扇將新鮮空氣吹到放置在需要冷卻的組件上方的散熱器上。 散熱器的散熱片增加了金屬板的表面，並增加了組件的熱交換能力。 \n 優： 風扇在這些散熱片之間吹動空氣，從而使熱交換重啟。 \n \xa0 \xa0 可以快速去除散熱片之間產生的熱空氣。 \n 缺：產生 微量的零件永遠無法冷卻到室溫以下。 \n 2. 被動風冷：被動主動空氣冷卻方法，被動空氣冷卻使用散熱器來產生接合的組件冷卻表面。 不過，區別在於散熱器的大小，因為被動空氣冷卻僅依賴散熱片的大小來減少熱量。 \n 優：被動式空氣冷卻是最有效的冷卻方式，因為它不使用任何電源進行操作。 \n 缺：散熱片必須足夠大，而且它們之間還必須具有足夠的空間，才能可以實現自然的空氣流動。 \n \xa0 \xa0 \xa0 散熱器會很重。 \n 3. 液體冷卻：液體冷卻利用了熱力學的基本原理，即轉變從較熱的物體轉移到較冷的 物體 。通過 較冷的物體變熱，較熱的物體變冷。 \n 優：被水冷卻的組件比起空氣傳遞更多的位移。 \n \xa0 \xa0 不受環境溫度的影響。 \n \xa0 \xa0 噪音水平相對低。 \n 缺：液體冷卻複雜，成本高。 \n 內部組件： \n 散熱器 ：散熱器通過使用冷卻風扇有效地冷卻液體，將吸收的轉換轉移到周圍環境中。散熱器上方，散熱器越有效，從而導致其液體溫度和替代組件溫度。 \n 水塊 ：水塊（或散熱器）從吸收吸收轉化。 它包含微翅片，這些微翅片用於增加尺寸並實現更佳的熱傳遞。 當液體流過水塊時，其吸收波長。 如果您使用更有效的阻水劑，則組件的整體溫度將會降低。 \n 水泵 ：水泵提供冷卻迴路中從熱側到冷側的液體循環。 這允許在整個迴路中進行有效的熱傳遞。 沒有良好的水泵，液體將滯留在迴路中，並且不會發生熱傳遞。 \n 儲 ：儲存器單元允許初始液體冷卻安裝後容易除去空氣 ，並作為在溫度波動的冷卻的膨脹區域 。 \n \n 液體冷卻安裝: \n 1.關閉計算機電源並拔下電源插頭 \n 2.打開機箱 \n 3.安裝處理器 \n 4.清潔CPU和水塊，清除灰塵和碎屑 \n 5.使用導熱膏 \n 6.水冷塊代替傳統的散熱器 \n \xa0 \xa0散熱器代替後箱風扇\xa0 \n 7.散熱器連接到水箱 \n 8.重新連接電源 \n 9.打開計算機電源，並確保液體冷卻系統正常運行 \n 10.關閉外殼 \n CPU安裝步驟: \n 1.將CPU安裝到主板的處理器插槽中。 \n 2.清潔CPU頂部和散熱器表面。 \n 3.在CPU和散熱器的表面塗上導熱膏。 \n 4.將散熱器安裝到處理器上。 \n 5.將冷卻風扇連接到散熱器的頂部。 \n 6.確保風扇已通電。 \n 7.每六個月清潔一次風扇葉片和散熱器的灰塵。 \n 機箱風扇 \n 機箱風扇對於消除計算機組件（尤其是視頻卡和CPU）產生的所有熱空氣是不可避免的。 必須排出熱空氣，用冷空氣代替。 通常會發現較冷的空氣靠近地面，因為熱量會上升，因此大多數情況下都設計成冷空氣被前殼風扇從底部吸入系統 ，空氣從CPU附近的機箱後部以及圖形處理單元附近的機箱側面排出。 \n 例: \n 此為常見配置 \n 機箱底部前部靠近驅動器托架（進氣口）的1個風扇。 \n 機箱後部頂部，CPU上方（排氣口之後）和上方的1個風扇。 \n 機箱側面有1個風扇，與GPU相對（進氣）。 \n 此設置將空氣從前部吸入，通過驅動器托架將其引導到視頻卡周圍，然後從排氣風扇中排出。 側風扇將空氣直接壓到最熱的組件（GPU）上，然後由前風扇向上推動，並從後部排氣風扇中導出。 \n \xa0 \xa0\xa0 \n 安裝步驟: \n 1. 確保已關閉PC的電源。 \n 2. 使用十字螺絲刀安裝機箱風扇。 \n 3. 將風扇連接到未使用的風扇接頭連接器上，為風扇供電。 \n 4.整理電纜線。 \n', 'tags': '', 'url': 'pch8第73〜75頁.html'}]};